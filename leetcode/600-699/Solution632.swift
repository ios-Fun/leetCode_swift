//
//  Solution632.swift
//  leetcode
//
//  Created by wang youzhuo on 2022/6/17.
//  Copyright © 2022 youzhuo wang. All rights reserved.
//

import Foundation
// 最小区间
// dfs + 剪枝
class Solution632 {
    var minValue = -1
    var minStart = 0
    var minEnd = 0
    var nums: [[Int]]!
    func smallestRange(_ nums: [[Int]]) -> [Int] {
        minValue = -1
        // nums 只有1行
        if nums.count == 1 {
            return [nums.first!.first!, nums.first!.first!]
        }
        self.nums = nums
        for i in 0..<nums.first!.count {
            // print("i:\(i):\(minValue)")
            dfs(mIndex: 0, target: nums[0][i], curList: [nums[0][i]])
        }
        return [minStart, minEnd]
    }
    
    func dfs(mIndex: Int, target: Int, curList:[Int]) {
        // print("curList: \(curList)")
        if minValue == 0 {
            return
        }
        if minValue != -1 && curList.count > 1 && (curList.last! - curList.first!) >= minValue {
            return
        }
        if mIndex == nums.count - 1 {
            // 最后一行
//            var curList = curList
//            curList.append(nums[mIndex][nIndex])
            if minValue == -1 {
                minValue = curList.last! - curList.first!
                minStart = curList.first!
                minEnd = curList.last!
                return
            }
            if (curList.last! - curList.first!) < minValue {
                minValue = curList.last! - curList.first!
                minStart = curList.first!
                minEnd = curList.last!
            }
            return
        }
//        if nIndex == nums[mIndex].count {
//            return
//        }
        
        // let curNum = self.nums[mIndex][nIndex]
        if mIndex < self.nums.count - 1 {
            var targetIndex = binary(0, nums[mIndex+1].count-1, self.nums[mIndex+1], target)
            
//            if targetIndex == nums[mIndex+1].count {
//                targetIndex = nums[mIndex+1].count - 1
//            }
            
            if targetIndex > 0 {
                targetIndex = targetIndex - 1
            }
            // print("list:\(self.nums[mIndex+1]), curNum: \(curNum): targetIndex:\(targetIndex)")
            let targetValue = nums[mIndex+1][targetIndex]
            if targetValue == target {
                // 如果值相同
//                var newList = curList
//                if curList.count > 0 {
//                    let insetIndex = binary(0, curList.count-1, curList, targetValue)
//                    newList.insert(targetValue, at: insetIndex)
//                } else {
//                    newList = [targetValue]
//                }
                dfs(mIndex: mIndex+1, target: target, curList: curList)
            } else {
                // targetValue肯定比 curNum 小了
                var newList1 = curList
                if curList.count > 0 {
//                    let insetIndex1 = binary(0, curList.count-1, curList, targetValue)
//                    if curList[insetIndex1] != targetValue {
//                        newList1.insert(targetValue, at: insetIndex1)
//                    }
                    if targetValue > curList.last! {
                        newList1.append(targetValue)
                    } else if targetValue < curList.first! {
                        newList1.insert(targetValue, at: 0)
                    }
                } else {
                    newList1 = [targetValue]
                }
                dfs(mIndex: mIndex+1, target: targetValue, curList: newList1)
                
                // 如果后面有值
                if targetIndex < nums[mIndex+1].count-1 {
                    var newList2 = curList
                    if curList.count > 0 {
//                        let insetIndex2 = binary(0, curList.count-1, curList, nums[mIndex+1][targetIndex+1])
//                        newList2.insert(nums[mIndex+1][targetIndex+1], at: insetIndex2)
                        if nums[mIndex+1][targetIndex+1] > curList.last! {
                            newList2.append(nums[mIndex+1][targetIndex+1])
                        } else if nums[mIndex+1][targetIndex+1] < curList.first! {
                            newList2.insert(nums[mIndex+1][targetIndex+1], at: 0)
                        }
                    } else {
                        newList2 = [nums[mIndex+1][targetIndex+1]]
                    }
                    dfs(mIndex: mIndex+1, target: nums[mIndex+1][targetIndex+1], curList: newList2)
                }
            }
        } else {
            // mIndex 是最后一行
            // dfs(mIndex: <#T##Int#>, nIndex: <#T##Int#>, curList: <#T##[Int]#>)
        }
    }
    
    // 二分查找，比curNum小的元素，返回index，没有则返回-1
//    func binarySearch(_ curNum: Int, _ mIndex: Int) {
//        let list = nums[mIndex]
//        var left = 0
//        var right = list.count - 1
//        while
//    }
    
    func binary (_ left: Int, _ right: Int, _ numsList:[Int], _ nTarget: Int) -> Int {
        // 比 left 小
        if nTarget < numsList[left] {
            return left
        }
        
        // 比right大
        if nTarget > numsList[right] {
            return right+1
        }
        if left == right {
            return left
        }
        
        let mid = (left + right)/2
        if nTarget == numsList[mid] {
            // 找到目标值
            return mid
        }
        if nTarget < numsList[mid] {
            return binary(left, mid-1, numsList, nTarget)
        }else {
            return binary(mid+1, right, numsList, nTarget)
        }
    }
    
    func test() {
        
          print(smallestRange([[95387,95790,97307,98168,99868,99995,99995,100000],[-69454,-17042,8172,50983,63432,72854,73012,80848,83723,85916,91759,99779,99913,99944,99994,99999,99999],[65641,95910,97995,98196,98969,99008,99591,99732,99735,99896,99952,99989,99999,100000],[57459,95855,97360,98320,99147,99865,99955,99989,99997,99998,100000],[-81589,-3474,84141,92981,95255,99192,99962,99970,99994,99998,99999,100000],[-23262,92924,95548,96462,99338,99553,99555,99569,99644,99903,99909,99999,99999,100000],[-58466,24432,87898,92795,95701,98143,98163,99182,99351,99746,99811,99943,99955,99978,99997,100000],[-97588,7867,10356,20288,67836,69868,73038,77753,81937,88474,89979,92182,98091,99635,99902,99941,99975,99987,99991,99998,99998,99998,99998,99998,99999,99999,99999,100000],[-96955,41521,84537,89794,96226,97103,97490,99347,99957,99997,100000],[-49247,93963,99006,99428,99964,99992,100000],[46062,48599,95745,98620,98677,99516,99802,99973,99993,100000],[-3786,59724,62870,80033,90471,98836,99395,99574,99682,99724,99909,99963,99979,99999,100000],[-62512,-19463,84187,89388,91368,95524,98987,99085,99230,99809,99978,100000],[18183,83019,98718,99570,99777,99980,100000],[19925,20448,81509,93698,98451,98776,98915,99007,99925,99994,99996,99999,100000],[-96129,93245,95417,98492,99013,99921,99934,99989,99995,100000],[-25468,61948,68372,85478,91239,98906,98988,99653,99915,99957,99998,99999,99999,100000],[36648,65266,95679,98905,99868,99977,99983,99983,99995,99995,99996,99997,100000],[56006,78969,86785,89834,92494,93887,98268,99771,99982,99998,99999,100000],[95387,95790,97307,98168,99868,99995,99995,100000],[-69454,-17042,8172,50983,63432,72854,73012,80848,83723,85916,91759,99779,99913,99944,99994,99999,99999],[65641,95910,97995,98196,98969,99008,99591,99732,99735,99896,99952,99989,99999,100000],[57459,95855,97360,98320,99147,99865,99955,99989,99997,99998,100000],[-81589,-3474,84141,92981,95255,99192,99962,99970,99994,99998,99999,100000],[-23262,92924,95548,96462,99338,99553,99555,99569,99644,99903,99909,99999,99999,100000],[-58466,24432,87898,92795,95701,98143,98163,99182,99351,99746,99811,99943,99955,99978,99997,100000],[-97588,7867,10356,20288,67836,69868,73038,77753,81937,88474,89979,92182,98091,99635,99902,99941,99975,99987,99991,99998,99998,99998,99998,99998,99999,99999,99999,100000],[-96955,41521,84537,89794,96226,97103,97490,99347,99957,99997,100000],[-49247,93963,99006,99428,99964,99992,100000],[46062,48599,95745,98620,98677,99516,99802,99973,99993,100000],[-3786,59724,62870,80033,90471,98836,99395,99574,99682,99724,99909,99963,99979,99999,100000],[-62512,-19463,84187,89388,91368,95524,98987,99085,99230,99809,99978,100000],[18183,83019,98718,99570,99777,99980,100000],[19925,20448,81509,93698,98451,98776,98915,99007,99925,99994,99996,99999,100000],[-96129,93245,95417,98492,99013,99921,99934,99989,99995,100000],[-25468,61948,68372,85478,91239,98906,98988,99653,99915,99957,99998,99999,99999,100000],[36648,65266,95679,98905,99868,99977,99983,99983,99995,99995,99996,99997,100000],[56006,78969,86785,89834,92494,93887,98268,99771,99982,99998,99999,100000],[95387,95790,97307,98168,99868,99995,99995,100000],[-69454,-17042,8172,50983,63432,72854,73012,80848,83723,85916,91759,99779,99913,99944,99994,99999,99999],[65641,95910,97995,98196,98969,99008,99591,99732,99735,99896,99952,99989,99999,100000],[57459,95855,97360,98320,99147,99865,99955,99989,99997,99998,100000],[-81589,-3474,84141,92981,95255,99192,99962,99970,99994,99998,99999,100000],[-23262,92924,95548,96462,99338,99553,99555,99569,99644,99903,99909,99999,99999,100000],[-58466,24432,87898,92795,95701,98143,98163,99182,99351,99746,99811,99943,99955,99978,99997,100000],[-97588,7867,10356,20288,67836,69868,73038,77753,81937,88474,89979,92182,98091,99635,99902,99941,99975,99987,99991,99998,99998,99998,99998,99998,99999,99999,99999,100000],[-96955,41521,84537,89794,96226,97103,97490,99347,99957,99997,100000],[-49247,93963,99006,99428,99964,99992,100000],[46062,48599,95745,98620,98677,99516,99802,99973,99993,100000],[-3786,59724,62870,80033,90471,98836,99395,99574,99682,99724,99909,99963,99979,99999,100000],[-62512,-19463,84187,89388,91368,95524,98987,99085,99230,99809,99978,100000],[18183,83019,98718,99570,99777,99980,100000],[19925,20448,81509,93698,98451,98776,98915,99007,99925,99994,99996,99999,100000],[-96129,93245,95417,98492,99013,99921,99934,99989,99995,100000],[-25468,61948,68372,85478,91239,98906,98988,99653,99915,99957,99998,99999,99999,100000],[36648,65266,95679,98905,99868,99977,99983,99983,99995,99995,99996,99997,100000],[56006,78969,86785,89834,92494,93887,98268,99771,99982,99998,99999,100000]]))
        
        print(smallestRange([[-89,1,69,89,90,98],[-43,-36,-24,-14,49,61,66,69],[73,94,94,96],[11,13,76,79,90],[-40,-20,1,9,12,12,14],[-91,-31,0,21,25,26,28,29,29,30],[23,88,89],[31,42,42,57],[-2,6,11,12,12,13,15],[-3,25,34,36,39],[-7,3,29,29,31,32,33],[4,11,14,15,15,18,19],[-34,9,12,19,19,19,19,20],[-26,4,47,53,64,64,64,64,64,65],[-51,-25,36,38,50,54],[17,25,38,38,38,38,40],[-30,12,15,19,19,20,22],[-14,-13,-10,68,69,69,72,74,75],[-39,42,70,70,70,71,72,72,73],[-67,-34,6,26,28,28,28,28,29,30,31]]))

         print(smallestRange([[2,18,24,26],[0,10,12,20],[1,3,22,30]]))

         print(smallestRange([[4,10,15,24,26], [0,9,12,20], [5,18,22,30]]))
        print(smallestRange([[1,2,3],[1,2,3],[1,2,3]]))
    }
    
    
}

// 各找到一个数，这几个数的范围最小
// 4
// [4, 0], [4, 9]
// [4,0,5] min: 5

// 10
// [10, 9], [10, 12]
// [10, 9, 5], [10, 9, 18

// 15
// [15, 12] [15, 20]
//
